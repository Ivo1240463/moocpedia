@using Microsoft.AspNetCore.Components.WebAssembly.Authentication

@* Dependencies *@
@inject NavigationManager _nav
@inject AuthenticationStateProvider _auth
@inject IJSRuntime _js

@* Content *@
<div>
    <AuthorizeView>
        <Authorized>
            @if (_profileLoaded)
            {
                <div class="account-profile-container">
                    <RadzenProfileMenu>
                        <Template>
                            <div class="profile-container">
                                <RadzenGravatar Email="@_userEmail"></RadzenGravatar>
                                <RadzenText class="account-name">@_userName</RadzenText>
                            </div>
                        </Template>
                        <ChildContent>
                            <RadzenButton Text="Log out" Icon="logout" Click="LogoutClick" Variant="Variant.Text" Size="ButtonSize.Small" Style="width: 100%;" />
                        </ChildContent>
                    </RadzenProfileMenu>
                </div>
            }
        </Authorized>
        <NotAuthorized>
            <RadzenButton Click="LoginClick" Text="Log in" ButtonStyle="ButtonStyle.Secondary" />
        </NotAuthorized>
    </AuthorizeView>
</div>

@code {
    #region Data
    private string? _userName = null;
    private string? _userEmail = null;
    private bool _profileLoaded = false;
    #endregion

    #region LifeCycle
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!_profileLoaded)
        {
            await LoadUserData();
        }
    }
    #endregion

    #region Functions
    public async Task LoadUserData()
    {
        var authState = await _auth.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated ?? false)
        {
            _userName = user.FindFirst(c => c.Type == "name")?.Value;
            _userEmail = user.FindFirst(c => c.Type == "email")?.Value;

            _profileLoaded = true;
            StateHasChanged();
        }
    }
    #endregion

    #region Clicks
    private void LoginClick()
    {
        _nav.NavigateTo("authentication/login");
        StateHasChanged();
    }

    private async Task LogoutClick()
    {
        // await _js.InvokeVoidAsync("logout");
        _nav.NavigateToLogout("authentication/logout");
        StateHasChanged();
    }
    #endregion
}